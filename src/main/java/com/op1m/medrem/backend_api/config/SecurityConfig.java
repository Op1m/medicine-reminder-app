package com.op1m.medrem.backend_api.config;

import com.op1m.medrem.backend_api.service.UserService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity security, UserService userService) throws Exception {
        security
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(authz -> authz
                        .requestMatchers("/api/auth/**", "/api/users/register").permitAll()
                        .anyRequest().authenticated()
                )
                .userDetailsService(userDetailsService(userService)) // üëà –ò—Å–ø–æ–ª—å–∑—É–µ–º –í–ê–®–ò–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                .httpBasic(httpBasic -> {});
        return security.build();
    }

    // üëá UserDetailsService –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –í–ê–®–ò–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    @Bean
    public UserDetailsService userDetailsService(UserService userService) {
        return username -> {
            System.out.println("=== SPRING SECURITY AUTH ===");
            System.out.println("üîê –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: " + username);

            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –í–ê–®–ï–ô –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            com.op1m.medrem.backend_api.entity.User user = userService.findByUsername(username);

            if (user == null) {
                System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: " + username);
                throw new UsernameNotFoundException("User not found: " + username);
            }

            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: " + user.getUsername());
            System.out.println("üîë –•–µ—à –ø–∞—Ä–æ–ª—è –∏–∑ –ë–î: " + user.getPassword());
            System.out.println("============================");

            // –°–æ–∑–¥–∞–µ–º Spring Security User –∏–∑ –í–ê–®–ï–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return User.builder()
                    .username(user.getUsername())
                    .password(user.getPassword()) // –ü–∞—Ä–æ–ª—å —É–∂–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –≤ –ë–î
                    .roles("USER")
                    .build();
        };
    }
}