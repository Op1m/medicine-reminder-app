package com.op1m.medrem.backend_api.scheduler;

import com.op1m.medrem.backend_api.entity.MedicineHistory;
import com.op1m.medrem.backend_api.entity.Reminder;
import com.op1m.medrem.backend_api.service.MedicineHistoryService;
import com.op1m.medrem.backend_api.service.ReminderService;
import jakarta.persistence.Column;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.datasource.init.CannotReadScriptException;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

@Component
public class ReminderScheduler {

    @Autowired
    private ReminderService reminderService;

    @Autowired
    private MedicineHistoryService medicineHistoryService;

    @Scheduled(cron = "0 * * * * *")
    @Transactional
    public void checkDueReminders() {
        System.out.println("üîî ReminderScheduler: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...");

        List<Reminder> dueReminders = reminderService.getDueReminders();

        for(Reminder reminder : dueReminders) {
            System.out.println("‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å: " +
                    reminder.getMedicine().getName() +
                    " (" + reminder.getMedicine().getDosage() + ")" +
                    " - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + reminder.getUser().getUsername());

            createHistoryRecord(reminder);
        }

        System.out.println("üìä ReminderScheduler: –ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: " + dueReminders.size());

        medicineHistoryService.checkAndMarkMissedDoses();
    }

    private void createHistoryRecord(Reminder reminder) {
        try {
            MedicineHistory history = medicineHistoryService.createScheduleDose(reminder.getId(), LocalDateTime.now());
            System.out.println("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏: " + history.getId());
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: " + e.getMessage());
        }
    }
}
